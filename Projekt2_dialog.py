# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Projekt2Dialog
                                 A QGIS plugin
 Projekt2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-03
        git sha              : $Format:%H$
        copyright            : (C) 2023 by M.Bielecki, M.Chwałek
        email                : m.bielecki1909@o2.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import Qgis
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Projekt2_dialog_base.ui'))


class Projekt2Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Projekt2Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButton_oblicz.clicked.connect(self.calculate_height_diff)

    def calculate_height_diff(self):
        layer = self.mMapLayerComboBox_layers.currentLayer()
        selected_points = layer.selectedFeatures()
        if len(selected_points) != 2:
            self.label_wynik.setText('Wybrano niewłaściwą liczbę punktów')
            iface.messageBar().pushMessage("Błąd",
                                           "Wybrano niewłaściwą liczbę punktów do obliczenia różnicy wysokości",
                                            level=Qgis.Critical)
        else:
            heights = []
            for point in selected_points:
                zcoord = point.attribute(layer.fields().indexFromName('zcoord'))
                heights.append(zcoord)
            delta_height = heights[1] - heights[0]
            self.label_wynik.setText(str(delta_height))
            iface.messageBar().pushMessage("Sukces",
                                           "Obliczanie powiodło się",
                                           level=Qgis.Success)
